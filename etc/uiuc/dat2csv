#!/usr/bin/env python3

"""a quick script to convert a dat file to a (compressed) csv file with informative column headers
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import sys
import numpy as np

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt

from argparse import ArgumentParser

#-------------------------------------------------

def plot(data, column, verbose=False):
    '''make a basic visualization of the data
    '''
    if args.verbose:
        print('    plotting %s(muB, T)'%column)

    x, y, z = np.transpose(data)

    # assume a regular grid
    nx = len(np.unique(x))
    shape = (len(x)//nx, nx)

    x = x.reshape(shape)[0,:]
    y = y.reshape(shape)[:,0]
    z = z.reshape(shape)

    # now plot
    fig = plt.figure()
    ax = fig.add_axes([0.15, 0.15, 0.80, 0.80])

    mappable = ax.imshow(
        z,
        extent=[np.min(x), np.max(x), np.min(y), np.max(y)],
        aspect='auto',
        origin='lower',
    )

    ax.contour(
        x,
        y,
        z,
        colors='grey',
    )

    ax.set_xlabel('$\mu_B\,[\mathrm{MeV}]$')
    ax.set_ylabel('$T\,[\mathrm{MeV}]$')

    cb = plt.colorbar(mappable)
    cb.set_label(column)

    # save
    path = column + '.png'
    if verbose:
        print('    saving : '+path)
    fig.savefig(path)
    plt.close(fig)

#-------------------------------------------------

parser = ArgumentParser()

parser.add_argument('--source', type=str, nargs=2, default=[], action='append',
    help='the source file to incorporate into a collated table. Can be repeated. \
e.g. --source energy_density path/to/energy_density.dat')

parser.add_argument('--target', default=None, type=str,
    help='if specified, output will be written to this file. Otherwise, it is printed to stdout')

parser.add_argument('-v', '--verbose', default=False, action='store_true')

parser.add_argument('-p', '--plot', default=False, action='store_true')

args = parser.parse_args()

assert len(args.source), 'please specify at least one --source!'

#-------------------------------------------------

# load data from the first file
# this establishes the grid for baryon chemical potential and temperature

column, path = args.source[0]
if args.verbose:
    print('loading : '+path)
data = np.genfromtxt(path)
if args.plot:
    fig = plot(data, column, verbose=args.verbose)

# start a dictionary so we can combine an arbitrary number of files
collated = dict([('muB_MeV', data[:,0]), ('T_MeV', data[:,1]), (column, data[:,2])])

#------------------------

# iterate through the rest of the source files
# check for consistency in the grid over baryon chemical potential and temperature

for column, path in args.source[1:]:
    if args.verbose:
        print('loading : '+path)
    data = np.genfromtxt(path)
    if args.plot:
        fig = plot(data, column, verbose=args.verbose)

    # check for consistency in the grid
    assert np.all(collated['muB_MeV'] == data[:,0]), 'conflict in baryon chemical potential grid'
    assert np.all(collated['T_MeV'] == data[:,1]), 'conflict in temperature grid'

    collated[column] = data[:,2]

#-------------------------------------------------

columns = list(collated.keys())

# write the combined table
if (args.target is not None) and args.verbose:
    print('writing : '+args.target)
np.savetxt(
    args.target if args.target is not None else sys.stdout,
    np.transpose([collated[col] for col in columns]),
    comments='',
    delimiter=',',
    header=','.join(columns),
)
