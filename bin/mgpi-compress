#!/usr/bin/env python3

"""compress training data into a vector that can be used to construct a Gaussian Process regression during runtime
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

from argparse import ArgumentParser

### non-standard libraries
from mgpi import io

#-------------------------------------------------

parser = ArgumentParser()

#---

igroup = parser.add_argument_group('input data')

igroup.add_argument('data', type=str,
    help='please provide an INI describing tabular data')
igroup.add_argument('--section', default=None, type=str,
    help='the section from the data INI that should be read.')

igroup.add_argument('interpolator', type=str,
    help='please provide an INI describing an interpolator')
igroup.add_argument('--kernel-params', default=None, type=str,
    help='if provided, we will compress the data for each set of the parameters within this file')

#---

ogroup = parser.add_argument_group('output arguments')

ogroup.add_argument('-v', '--verbose', default=False, action='store_true')
ogroup.add_argument('--time-execution', default=False, action='store_true')

ogroup.add_argument('outpath', type=str,
    help='the path into which we write compressed data')

#---

args = parser.parse_args()

args.verbose |= args.time_execution

#-------------------------------------------------

# load data
(source_x, source_f), (xcols, fcol) = io.parse_table(args.data, section=args.section, verbose=args.verbose)

# load interpolator
interpolator = io.parse_interpolator(args.interpolator, verbose=args.verbose)

# load kernel parameteters
if args.kernel_params:
    params = io.load_ascii_data(args.kernel_params, verbose=args.verbose)
else:
    params = [interpolator.kernel.params]

#------------------------

# iterate over parameters and generate compressed data
if args.verbose:
    print('generating compressed data for %d parameter sets' % len(params))

compressed = []
for params in params:

    # update the kernel
    interpolator.update(*params)
    if verbose:
        print('    %s' % kernel)

    # compress
    compressed.append(interpolator.compress(source_x, source_f, verbose=args.time_execution))

#------------------------

# write compressed data to disk
io.save_compressed_data(
    args.outpath,
    source_x,
    compressed,
    params,
    xcols=xcols,
    fcol=fcol,
    verbose=args.verbose,
)
