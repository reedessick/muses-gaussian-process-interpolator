#!/usr/bin/env python3

"""construct an interpolation grid via Gaussian process regression based on input data and a list of hyperparameters
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

from argparse import ArgumentParser

### non-standard libraries
from mgpi import io

#-------------------------------------------------

DEFAULT_DOWNSAMPLE = 1 # de facto, no downselection by default

#-------------------------------------------------

parser = ArgumentParser()

#---

igroup = parser.add_argument_group('input data')

igroup.add_argument('data', type=str,
    help='please provide an INI describing tabular data')
igroup.add_argument('--section', default=None, type=str,
    help='the section from the data INI that should be read.')

igroup.add_argument('interpolator', type=str,
    help='please provide an INI describing an interpolator')

#---

ggroup = parser.add_argument_group('grid parameters')

### FIXME : also include parameters that describe the grid over which we make predictions

#---

ogroup = parser.add_argument_group('output-arguments')

ogroup.add_argument('-v', '--verbose', default=False, action='store_true')
ogroup.add_argument('--time-execution', default=False, action='store_true')

ogroup.add_argument('outpath', type=str,
    help='the path into which we write conditioned data')

#---

args = parser.parse_args()

args.verbose |= args.time_execution

#-------------------------------------------------

# load data
(source_x, source_f), (xcols, fcol) = io.parse_table(args.data, section=args.section, verbose=args.verbose)

# load interpolator
interpolator = io.parse_interpolator(args.interpolator, verbose=args.verbose)

#-------------------------------------------------

# define grid on which we compute GP regression

raise NotImplementedError('''\
define the grid over which we want to compute the GPR predictions
target_x = ...
''')

#-------------------------------------------------

# perform the regression

if args.verbose:
    print('generating conditioned mean and covariance')

mean, cov = interpolator.condition(target_x, source_x, source_f, verbose=args.time_execution)

#-------------------------------------------------

# save the output
io.save_conditioned_data(
    args.outpath,
    target_x,
    mean,
    cov=cov,
    xcols=xcols,
    fcol=fcol,
    verbose=args.verbose,
)
