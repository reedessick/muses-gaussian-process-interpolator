#!/usr/bin/env python3

"""optimize hyperparameter sets from the marginal likelihood given observed data
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

from argparse import ArgumentParser

### non-standard libraries
from mgpi import (io, utils)
from mgpi.interpolators improt (DEFAULT_METHOD, DEFAULT_TEMPERATURE)

#-------------------------------------------------

parser = ArgumentParser()

#---

igroup = parser.add_argument_group('input data')

igroup.add_argument('data', type=str,
    help='please provide an INI describing tabular data')
igroup.add_argument('--section', default=None, type=str,
    help='the section from the data INI that should be read.')

igroup.add_argument('interpolator', type=str,
    help='please provide an INI describing an interpolator')
igroup.add_argument('--kernel-params', default=None, type=str,
    help='if provided, we will compress the data for each set of the parameters within this file')

#---

wgroup = parser.add_argument_group('workflow arguments')

wgroup.add_argument('--method', default=DEFAULT_METHOD, type=str)
wgroup.add_argument('--temperature', default=DEFAULT_TEMPERATURE, type=float)

wgroup.add_argument('--fix', nargs=2, default=[], type=str, action='append',
    help='fix a parameter within the optimization. Can be repeated. e.g.: --fix sigma 1e-2')

wgroup.add_argument('--limits', nargs=3, default=[], type=str, action='append',
    help='set bounds for a parameter. Can be repeated. e.g.: --bounds sigma 0.1 1.0')

#---

ogroup = parser.add_argument_group('output arguments')

ogroup.add_argument('-v', '--verbose', default=False, action='store_true')
ogroup.add_argument('--time-execution', default=False, action='store_true')

ogroup.add_argument('outpath', type=str,
    help='the path into which we write compressed data')

#---

args = parser.parse_args()

args.verbose |= args.time_execution

fixed = dict((key, float(val)) for key, val in args.fix)
bounds = dict((key, (float(m), float(M))) for key, m, M in args.bound)

#-------------------------------------------------

# load data
(source_x, source_f), (xcols, fcol) = io.parse_table(args.data, section=args.section, verbose=args.verbose)

# load interpolator
interpolator = io.parse_interpolator(args.interpolator, verbose=args.verbose)

#-------------------------------------------------

if args.verbose:
    print('optimizing kernel parameters')

params = interpolator.optimize_kernel(
    source_x,
    source_f,
    method=args.method,
    logprior=utils.construct_logprior(interpolator.kernel._params, bounds, fixed),
    fixed=fixed,
    temperature=args.temperature,
    verbose=args.time_execution,
)

#------------------------

# write optimized kernel parameters to disk
io.save_data(args.outpath, params, verbose=args.verbose)
